name: Build Python Wheel (Flexible)
description: Build a Python wheel using different backends and options.

inputs:
  python-version:
    description: Python version
    default: "3.10"

  build-backend:
    description: build, poetry, flit, setuptools
    default: "build"
  
  package-directory:
    description: Path to the source package directory (where setup.cfg or pyproject.toml is located)
    required: true
    default: "."

  build-command:
    description: Custom build command (will override default backend command)
    required: false

  installer:
    description: Choose dependency installer - pip or uv
    required: false
    default: "pip"

  run-tests:
    description: Run tests?
    default: "false"

  run-lint:
    description: Run linting?
    default: "false"

  test-requirements-file:
    description: Path to the test requirements file
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install uv if needed
      if: ${{ inputs.installer == 'uv' }}
      shell: bash
      run: |
        pip install uv

    - name: Install build tools
      shell: bash
      run: |
        if [ "${{ inputs.installer }}" = "uv" ]; then
          uv pip install --upgrade pip
        else
          pip install --upgrade pip
        fi
        case "${{ inputs.build-backend }}" in
          build)
            if [ "${{ inputs.installer }}" = "uv" ]; then
              uv pip install build
            else
              pip install build
            fi
            ;;
          poetry)
            if [ "${{ inputs.installer }}" = "uv" ]; then
              uv pip install poetry
              poetry config virtualenvs.create false
            else
              pip install poetry
              poetry config virtualenvs.create false
            fi
            ;;
          flit)
            if [ "${{ inputs.installer }}" = "uv" ]; then
              uv pip install flit flit_core
            else
              pip install flit flit_core
            fi
            ;;
          setuptools)
            if [ "${{ inputs.installer }}" = "uv" ]; then
              uv pip install setuptools wheel
            else
              pip install setuptools wheel
            fi
            ;;
          *)
            echo "Unsupported backend"; exit 1
            ;;
        esac

    - name: Run Lint (optional)
      if: ${{ inputs.run-lint == 'true' }}
      shell: bash
      run: |
        if [ "${{ inputs.installer }}" = "uv" ]; then
          uv pip install black
        else
          pip install black
        fi
        black . --check

    - name: Run Tests (optional)
      if: ${{ inputs.run-tests == 'true' }}
      shell: bash
      run: |
        if [ "${{ inputs.installer }}" = "uv" ]; then
          uv pip install pytest
          if [ -n "${{ inputs.test-requirements-file }}" ] && [ -f "${{ inputs.test-requirements-file }}" ]; then
            uv pip install -r "${{ inputs.test-requirements-file }}"
          fi
        else
          pip install pytest
          if [ -n "${{ inputs.test-requirements-file }}" ] && [ -f "${{ inputs.test-requirements-file }}" ]; then
            pip install -r "${{ inputs.test-requirements-file }}"
          fi
        fi
        pytest

    - name: Build Package
      shell: bash
      run: |
        cd "${{ inputs.package-directory }}"
        if [ -n "${{ inputs.build-command }}" ]; then
          echo "Using custom build command: ${{ inputs.build-command }}"
          eval "${{ inputs.build-command }}"
        else
          case "${{ inputs.build-backend }}" in
            build)
              python -m build
              ;;
            poetry)
              poetry build
              ;;
            flit)
              flit build
              ;;
            setuptools)
              python setup.py bdist_wheel
              ;;
          esac
        fi

    - name: Upload built wheel
      uses: actions/upload-artifact@v4
      with:
        name: built-wheel
        path: ${{ inputs.source-package-directory }}/dist/*.whl